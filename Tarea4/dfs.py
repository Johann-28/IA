import time

inicio = time.time()

class Grafo:
    def __init__(self,grafo = {}):
        self.grafo = grafo
        
    def agregar_arista(self, nodo1, nodo2, peso):
        # Si el nodo1 no existe en el grafo, se agrega como una lista vacía
        if nodo1 not in self.grafo:
            self.grafo[nodo1] = []
        # Se agrega el nodo2 y su peso a la lista de adyacencia del nodo1
        self.grafo[nodo1].append((nodo2, peso))
        
    def dfs(self, inicio, final):
        visitados = set()  # Conjunto de nodos visitados
        pila = [(inicio, [], 0)]  # Pila de nodos por visitar, junto con el camino recorrido y el peso total hasta ese momento
        while pila:
            nodo, camino, peso = pila.pop()
            if nodo == final:
                # Si se llega al nodo final, se devuelve el camino recorrido y el peso total
                return camino + [nodo], peso
            visitados.add(nodo)
            for vecino, peso_vecino in self.grafo[nodo]:
                if vecino not in visitados:
                    # Si el vecino no ha sido visitado, se agrega a la pila junto con el camino recorrido y el peso total actualizados
                    pila.append((vecino, camino + [nodo], peso + peso_vecino))
                    
        # Si no se encuentra una ruta, se devuelve None
        return None
                    
    def ruta_mas_corta_dfs(self, inicio, final):
        # Envoltura del método dfs que devuelve solo la ruta más corta y su peso total
        ruta, peso = self.dfs(inicio, final)
        if ruta is None:
            return None
        return ruta, peso


grafica = {
    0: [(3, 10), (4, 6), (15, 3), (18, 6), (22, 1), (24, 4), (31, 3), (38, 8), (39, 10), (42, 10)],
    1: [(2, 3), (3, 2), (7, 8), (8, 4), (15, 10), (20, 2), (21, 1), (48, 4), (49, 8)],
    2: [(1, 3), (7, 7), (9, 6), (12, 6), (14, 5), (20, 9), (21, 1), (27, 1), (31, 10), (32, 1), (36, 9), (45, 5), (47, 8), (48, 7)],
    3: [(0, 10), (1, 2), (10, 6), (12, 4), (23, 1), (24, 4), (26, 1), (27, 1), (30, 10), (36, 8), (37, 10), (40, 3), (44, 6), (46, 10)],
    4: [(0, 6), (8, 1), (9, 7), (10, 5), (12, 4), (13, 6), (18, 1), (28, 4), (32, 9), (36, 8), (37, 9)],
    5: [(12, 6), (15, 10), (20, 1), (22, 5), (24, 1), (42, 7), (49, 6)],
    6: [(13, 5), (20, 4), (22, 1), (23, 7), (27, 9), (37, 5), (38, 2), (43, 10)],
    7: [(1, 8), (2, 7), (8, 2), (14, 8), (17, 8), (26, 3), (28, 9), (30, 3), (31, 7), (32, 9), (41, 3), (48, 7)],
    8: [(1, 4), (4, 1), (7, 2), (14, 9), (19, 1), (23, 1), (25, 9), (30, 1), (37, 9), (38, 10), (45, 1)],
    9: [(2, 6), (4, 7), (14, 10), (21, 9), (22, 1), (24, 5), (25, 9), (27, 3), (36, 4), (43, 2)],
    10: [(3, 6), (4, 5), (38, 7), (40, 1), (41, 10)],
    11: [(13, 7), (22, 7), (23, 4), (30, 7), (31, 3), (34, 6), (35, 4), (37, 6), (46, 5), (49, 4)],
    12: [(2, 6), (3, 4), (4, 4), (5, 6), (13, 7), (24, 1), (27, 9), (30, 10), (35, 8), (37, 10), (41, 10), (45, 3)],
    13: [(4, 6), (6, 5), (11, 7), (12, 7), (19, 1), (29, 10), (42, 4), (43, 2), (44, 3)],
    14: [(2, 5), (7, 8), (8, 9), (9, 10), (16, 4), (22, 7), (25, 9), (38, 4)],
    15: [(0, 3), (1, 10), (5, 10), (20, 4), (30, 4), (31, 8), (39, 7), (41, 2)],
    16: [(14, 4), (20, 3), (22, 5), (24, 7), (25, 9), (26, 2), (27, 5), (30, 9), (32, 7), (39, 4), (40, 1), (43, 5)],
    17: [(7, 8), (26, 7), (29, 7), (31, 5), (45, 4)],
    18: [(0, 6), (4, 1), (21, 8), (23, 1), (29, 8), (35, 7), (37, 6), (39, 10)],
    19: [(8, 1), (13, 1), (30, 4), (31, 3), (35, 8), (36, 9), (39, 6), (41, 5), (43, 1)],
    20: [(1, 2), (2, 9), (5, 1), (6, 4), (15, 4), (16, 3), (24, 8), (25, 8), (27, 1), (35, 5), (37, 6), (39, 10), (40, 9), (41, 8)],
    21: [(1, 1), (2, 1), (9, 9), (18, 8), (22, 6), (25, 7), (31, 6), (44, 4), (47, 5)],
    22: [(0, 1), (5, 5), (6, 1), (9, 1), (11, 7), (14, 7), (16, 5), (21, 6), (27, 6), (28, 1), (46, 8), (48, 2), (49, 9)],
    23: [(3, 1), (6, 7), (8, 1), (11, 4), (18, 1), (33, 3), (37, 3), (39, 1), (41, 5), (42, 3)],
    24: [(0, 4), (3, 4), (5, 1), (9, 5), (12, 1), (16, 7), (20, 8), (30, 3), (35, 3), (37, 2), (38, 9)],
    25: [(8, 9), (9, 9), (14, 9), (16, 9), (20, 8), (21, 7), (49, 1)],
    26: [(3, 1), (7, 3), (16, 2), (17, 7), (32, 8), (34, 9), (46, 8)],
    27: [(2, 1), (3, 1), (6, 9), (9, 3), (12, 9), (16, 5), (20, 1), (22, 6), (30, 9), (37, 9), (38, 10), (43, 9)],
    28: [(4, 4), (7, 9), (22, 1), (31, 1), (39, 5), (44, 8), (47, 6), (48, 8), (49, 7)],
    29: [(13, 10), (17, 7), (18, 8), (34, 1), (36, 6), (41, 8), (42, 9)],
    30: [(3, 10), (7, 3), (8, 1), (11, 7), (12, 10), (15, 4), (16, 9), (19, 4), (24, 3), (27, 9), (37, 10), (46, 3)],
    31: [(0, 3), (2, 10), (7, 7), (11, 3), (15, 8), (17, 5), (19, 3), (21, 6), (28, 1), (33, 4), (37, 7), (38, 9), (42, 3)],
    32: [(2, 1), (4, 9), (7, 9), (16, 7), (26, 8), (33, 3), (35, 7), (43, 10), (49, 4)],
    33: [(23, 3), (31, 4), (32, 3), (34, 8), (35, 5), (39, 1), (49, 10)],
    34: [(11, 6), (26, 9), (29, 1), (33, 8), (35, 9), (36, 2), (48, 6), (49, 5)],
    35: [(11, 4), (12, 8), (18, 7), (19, 8), (20, 5), (24, 3), (32, 7), (33, 5), (34, 9), (36, 6), (39, 4), (41, 5), (42, 3), (48, 5)],
    36: [(2, 9), (3, 8), (4, 8), (9, 4), (19, 9), (29, 6), (34, 2), (35, 6), (41, 6)],
    37: [(3, 10), (4, 9), (6, 5), (8, 9), (11, 6), (12, 10), (18, 6), (20, 6), (23, 3), (24, 2), (27, 9), (30, 10), (31, 7), (43, 4), (47, 3), (48, 7)],
    38: [(0, 8), (6, 2), (8, 10), (10, 7), (14, 4), (24, 9), (27, 10), (31, 9), (39, 10), (40, 9), (43, 10), (44, 3), (47, 10)],
    39: [(0, 10), (15, 7), (16, 4), (18, 10), (19, 6), (20, 10), (23, 1), (28, 5), (33, 1), (35, 4), (38, 10), (41, 9), (43, 3), (48, 3)],
    40: [(3, 3), (10, 1), (16, 1), (20, 9), (38, 9), (47, 8)],
    41: [(7, 3), (10, 10), (12, 10), (15, 2), (19, 5), (20, 8), (23, 5), (29, 8), (35, 5), (36, 6), (39, 9), (42, 5), (48, 6)],
    42: [(0, 10), (5, 7), (13, 4), (23, 3), (29, 9), (31, 3), (35, 3), (41, 5), (45, 8), (49, 7)],
    43: [(6, 10), (9, 2), (13, 2), (16, 5), (19, 1), (27, 9), (32, 10), (37, 4), (38, 10), (39, 3), (46, 8), (47, 2), (49, 2)],
    44: [(3, 6), (13, 3), (21, 4), (28, 8), (38, 3)],
    45: [(2, 5), (8, 1), (12, 3), (17, 4), (42, 8)],
    46: [(3, 10), (11, 5), (22, 8), (26, 8), (30, 3), (43, 8), (49, 3)],
    47: [(2, 8), (21, 5), (28, 6), (37, 3), (38, 10), (40, 8), (43, 2), (48, 9)],
    48: [(1, 4), (2, 7), (7, 7), (22, 2), (28, 8), (34, 6), (35, 5), (37, 7), (39, 3), (41, 6), (47, 9)],
    49: [(1, 8), (5, 6), (11, 4), (22, 9), (25, 1), (28, 7), (32, 4), (33, 10), (34, 5), (42, 7), (43, 2), (46, 3)]
}


gr = Grafo(grafica)

for g in grafica:
    for x in grafica:
        if g == x:
            continue

        path = gr.ruta_mas_corta_dfs(g,x)
        print('El camino mas corto de ',g,' a ',x,' es: ',path[0], 'con costo: ', path[1])

final = time.time()
print("tiempo de ejecucion" , final - inicio)